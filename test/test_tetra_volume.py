import numpy as np

def directed_3D_tetrahedron_volume_standard(v0, v1, v2, v3):
    """
    标准答案: 通过行列式计算四面体带方向的体积
    """
    matrix = np.array([
        [1, *v0],
        [1, *v1],
        [1, *v2],
        [1, *v3]
    ])
    volume = np.linalg.det(matrix) / 6.0
    return volume


def directed_3D_tetrahedron_volume_translated(v0, v1, v2, v3):
    """
    翻译自C++代码: 使用公式计算四面体带方向的体积
    """
    x0, y0, z0 = v0
    x1, y1, z1 = v1
    x2, y2, z2 = v2
    x3, y3, z3 = v3

    volume = (1.0 / 6.0) * (
        x0 * (y1 * z2 + y2 * z3 + y3 * z1 - y1 * z3 - y2 * z1 - y3 * z2) -
        y0 * (x1 * z2 + x2 * z3 + x3 * z1 - x1 * z3 - x2 * z1 - x3 * z2) +
        z0 * (x1 * y2 + x2 * y3 + x3 * y1 - x1 * y3 - x2 * y1 - x3 * y2) -
        (x1 * y2 * z3 + x2 * y3 * z1 + x3 * y1 * z2 - x1 * y3 * z2 - x2 * y1 * z3 - x3 * y2 * z1)
    )
    return -volume


def test_tetrahedron_volumes():
    """
    测试两种方法的结果
    """
    test_cases = [
    # 单位四面体
        ([0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]),  # 预期: 1/6 ≈ 0.1667

        # 反转顺序的单位四面体
        ([0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]),  # 预期: -1/6 ≈ -0.1667

        # 平面上的点
        ([0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]),  # 预期: 0

        # 非单位四面体
        ([0, 0, 0], [2, 0, 0], [0, 3, 0], [0, 0, 4]),  # 预期: 4

        # 偏移的单位四面体
        ([1, 1, 1], [2, 1, 1], [1, 2, 1], [1, 1, 2]),  # 预期: 1/6 ≈ 0.1667

        # 反转顺序的偏移单位四面体
        ([1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1]),  # 预期: -1/6 ≈ -0.1667

        # 坐标为负的四面体
        ([-1, -1, -1], [-2, -1, -1], [-1, -2, -1], [-1, -1, -2]),  # 预期: -1/6 ≈ -0.1667

        # 较大的四面体
        ([0, 0, 0], [10, 0, 0], [0, 10, 0], [0, 0, 10]),  # 预期: 1000/6 ≈ 166.6667

        # 高瘦四面体
        ([0, 0, 0], [1, 0, 0], [0, 0.01, 0], [0, 0, 100]),  # 预期: 0.1667

        # 平行于一个轴的四面体
        ([0, 0, 0], [1, 0, 0], [1, 1, 0], [1, 1, 1]),  # 预期: 1/6 ≈ 0.1667

        # 四面体的点很近
        ([0, 0, 0], [1e-6, 0, 0], [0, 1e-6, 0], [0, 0, 1e-6]),  # 预期: 1e-18 / 6 ≈ 1.6667e-19

        # 倾斜的四面体
        ([0, 0, 0], [1, 1, 0], [0, 1, 1], [1, 0, 1]),  # 预期: 1/6 ≈ 0.1667

        # 共线点的四面体
        ([0, 0, 0], [1, 0, 0], [2, 0, 0], [3, 0, 0]),  # 预期: 0

        # 高度为0的四面体
        ([0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 0]),  # 预期: 0

        # 四面体中点在负轴
        ([0, 0, 0], [-1, 0, 0], [0, -1, 0], [0, 0, -1]),  # 预期: -1/6 ≈ -0.1667

        # 另一种单位四面体
        ([1, 1, 1], [2, 1, 1], [1, 2, 1], [1, 1, 3]),  # 预期: 1/3 ≈ 0.3333

        # 高瘦四面体（另一个方向）
        ([0, 0, 0], [0.1, 0, 0], [0, 0.1, 0], [0, 0, 100]),  # 预期: 0.1667

        # 较大但扁平的四面体
        ([0, 0, 0], [100, 0, 0], [0, 100, 0], [0, 100, 1]),  # 预期: 1666.6667

        # 较大的负方向四面体
        ([-10, -10, -10], [-20, -10, -10], [-10, -20, -10], [-10, -10, -20]),  # 预期: -333.3333

        # 点非常接近原点
        ([1e-10, 1e-10, 1e-10], [1, 0, 0], [0, 1, 0], [0, 0, 1]),  # 预期: 1/6 ≈ 0.1667

        # 四面体点全部在正坐标
        ([0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]),  # 预期: 0 (共面点)

        # 偏移的大四面体
        ([10, 10, 10], [20, 10, 10], [10, 20, 10], [10, 10, 30]),  # 预期: 166.6667

        # 点在不同象限
        ([0, 0, 0], [-1, 0, 0], [0, -1, 0], [0, 0, -1]),  # 预期: -1/6 ≈ -0.1667

        # 多个坐标为零
        ([0, 0, 0], [0, 1, 0], [0, 0, 1], [1, 0, 0]),  # 预期: 1/6 ≈ 0.1667

        # 一个点在远处
        ([0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1000]),  # 预期: 166.6667

        # 一维很长的四面体
        ([0, 0, 0], [1e9, 0, 0], [0, 1, 0], [0, 0, 1]),  # 预期: 1e9/6 ≈ 166666666.6667

        # 高度非常接近零
        ([0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1e-9]),  # 预期: 1e-9 / 6 ≈ 1.6667e-10

        # 共面四点（旋转情况）
        ([0, 0, 0], [1, 1, 0], [2, 2, 0], [3, 3, 0]),  # 预期: 0

        # 一条边非常长
        ([0, 0, 0], [1e6, 0, 0], [0, 1, 0], [0, 0, 1]),  # 预期: 1e6 / 6 ≈ 166666.6667

        # 随机大小四面体
        ([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12])
    ]

    for i, (v0, v1, v2, v3) in enumerate(test_cases, 1):
        standard_result = directed_3D_tetrahedron_volume_standard(v0, v1, v2, v3)
        translated_result = directed_3D_tetrahedron_volume_translated(v0, v1, v2, v3)
        print(f"Test Case {i}:")
        print(f"  Standard Result:   {standard_result}")
        print(f"  Translated Result: {translated_result}")
        print(f"  Match: {np.isclose(standard_result, translated_result)}\n")


# 运行测试
test_tetrahedron_volumes()
